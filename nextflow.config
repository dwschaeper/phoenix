/*
========================================================================================
    cdc/phoenix Nextflow conf-core schema lint nextflow_schema.jsonnfig file
========================================================================================
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Input and Output options
    input                       = null
    outdir                      = null
    kraken2db                   = null
    busco_db_path               = null
    coverage                    = 30 // can only increase above 30

    // Additional input parameters for -entry SCAFFOLDS and CDC_SCAFFOLDS
    indir                       = null
    scaffolds_ext               = '.scaffolds.fa.gz'

    // Params for filtering
    minlength                   = 500
    phred                       = 33

    // Additional input parameters for -entry SRA and CDC_SRA
    input_sra                   = null
    use_sra                     = false

    // For NCBI spreadsheet creation
    microbe_example             = "${baseDir}/assets/Microbe.1.0_Example_Data.xlsx"
    sra_metadata                = "${baseDir}/assets/SRA_metadata_example.xlsx"
    osii_bioprojects            = "${baseDir}/assets/osii-bioprojects.yaml"
    create_ncbi_sheet           = false

    // Terra and ICA specific options
    terra                       = false
    ica                         = false

    // Database paths
    //path2db                   = "${baseDir}/assets/databases" // need this for kraken2db if you place those files in the assets folder
    placeholder                 = "${baseDir}/assets/placeholder.txt" // need for passing empty line to spades
    bbdukdb                     = "${baseDir}/assets/databases/phiX.fasta"
    zipped_sketch               = "${baseDir}/assets/databases/REFSEQ_20240124_Bacteria_complete.msh.gz"
    amrfinder_db                = "${baseDir}/assets/databases/amrfinderdb_v3.12_20240131.1.tar.gz"
    ncbi_assembly_stats         = "${baseDir}/assets/databases/NCBI_Assembly_stats_20240124.txt"
    taxa                        = "${baseDir}/assets/databases/taxes_20230516.csv"
    ardb                        = "${baseDir}/assets/databases/ResGANNCBI_20240229_srst2.fasta"
    gamdbpf                     = "${baseDir}/assets/databases/PF-Replicons_20240124.fasta"
    hvgamdb                     = "${baseDir}/assets/databases/HyperVirulence_20220414.fasta"
    custom_mlstdb               = "${baseDir}/assets/databases/mlst_db_20240124.tar.gz"
    nodes                       = "${baseDir}/assets/databases/nodes_20240129.dmp.gz"
    names                       = "${baseDir}/assets/databases/names_20240129.dmp.gz"

    //busco db prep
    busco_config               = "${baseDir}/conf/modules.config"
    publish_dir_mode           = 'copy'

    // MultiQC options
    multiqc_config             = null
    multiqc_title              = null
    max_multiqc_email_size     = '25.MB'

    // Boilerplate options
    tracedir                   = "${params.outdir}/pipeline_info"
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    help                       = false
    validate_params            = true
    show_hidden_params         = false
    schema_ignore_params       = 'ica,nodes,names,sra_metadata,osii_bioprojects,microbe_example,custom_mlstdb,scaffolds_ext,input_sra,amrfinder_db,sra_fastqs,results,placeholder,zipped_sketch,terra,fasta,minlength,phred,ardb,hvgamdb,gamdbpf,taxa,ncbi_assembly_stats,refseq_fasta_database,bbdukdb,path2db,busco_config'
    enable_conda               = false

    // Config options
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_description = null
    config_profile_contact     = null
    config_profile_url         = null
    config_profile_name        = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        params.enable_conda    = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }
    amd_tower  { includeConfig "conf/amd_tower.config"    }
    cdcsge     { includeConfig "conf/cdcsge.config"       }
    cdcsge_test     { includeConfig "conf/cdcsge_test.config"       }
    kraken     { includeConfig 'conf/kraken.config'       }
    terra      { includeConfig 'conf/terra.config'        }
    hpc_custom { includeConfig 'conf/HPC_Template.config' }
    test       { includeConfig 'conf/test.config'         }
    test_pass  { includeConfig 'conf/test_pass.config'    }
    test_full  { includeConfig 'conf/test_full.config'    }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}

// when you change version here make sure its also changed in -entry CLIA CREATE_CLIA_PDF module
manifest {
    name            = 'cdcgov/phoenix'
    author          = 'Maria Diaz, Nicholas Vlachos, Alyssa Kent, Yueli Zheng, Jill Hagey'
    homePage        = 'https://github.com/CDCgov/phoenix'
    description     = 'PHoeNIx: A short-read pipeline for healthcare-associated and antimicrobial resistant pathogens'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    version         = '2.1.1'
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
